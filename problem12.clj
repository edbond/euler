;
; The sequence of triangle numbers is generated by adding the natural numbers.
; So the 7^(th) triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
; The first ten terms would be:
;
; 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
;
; Let us list the factors of the first seven triangle numbers:
;
     ;1: 1
     ;3: 1,3
     ;6: 1,2,3,6
    ;10: 1,2,5,10
    ;15: 1,3,5,15
    ;21: 1,3,7,21
    ;28: 1,2,4,7,14,28
;
; We can see that 28 is the first triangle number to have over five divisors.
;
; What is the value of the first triangle number to have over five hundred divisors?
;

(ns problem12
  (:use clojure.set)
  (:use clojure.test))

  ;(:require clojure.contrib.profile))

(set! *warn-on-reflection* true)

(def divmap (ref (hash-map)))

(defn divides [a b acc]
  (if (zero? (rem a b))
    (let [d (/ a b)]
      (conj (union acc (get @divmap b #{}) (get @divmap d #{})) b))
    acc))

(defn dividers
  [x]
  (loop
    [acc #{} i 1]
    (do
      (if (> i (/ x 2))
        (conj acc x)
        (recur (divides x i acc) (inc i))))))

(defn dividers-memo
  [x]
  (let
    [result (dividers x)]
    (dosync
      (if-not (contains? divmap x)
        (alter divmap assoc x result)))
      result))

(defn solve
  [n]
  (let
    [numbers (iterate inc 2)
     triangle-numbers (pmap #(apply + (range 1 %)) numbers)]
    (first (filter #(> (count (dividers-memo %)) n) triangle-numbers))))

(def triangles
  (lazy-seq
    (cons 0 (map + triangles (iterate inc 1)))))

; test
(dosync (alter divmap assoc 5 #{1 5}))
(is (= #{1 5 2} (divides 10 2 #{})))

(is (= 28 (solve 5)))

; 50 25200
;(println (time (solve 500)))
